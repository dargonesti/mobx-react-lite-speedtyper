{"version":3,"sources":["assets/logo.svg","Data/Quotes.js","Data/ConfigStore.js","Components/Typer.jsx","Data/Attempts.js","Data/GlobalState.js","Data/index.js","Components/Timer.jsx","Components/FontPicker.jsx","Components/Controls.jsx","Components/Instructions.jsx","Views/App.js","serviceWorker.js","index.js"],"names":["module","exports","binarySearch","ar","el","compare_fn","el1","el2","m","n","length","k","cmp","console","log","quotesJson","fnMod","sommePop","reduce","p","c","Popularity","q","Quote","i","quoteContext","createContext","QuoteProvider","children","store","useLocalStore","raceStartTime","raceEndTime","playingState","touchesTimes","finalWPM","currentText","currentQuoteInd","getCurrentQuote","getRandomQuote","randTarget","Math","random","indexNewQuote","abs","target","quote","startNew","tryAgain","changedTexte","newText","Date","now","Provider","value","storeContext","React","createGameStore","font","localStorage","getItem","changeFont","newFont","setItem","this","StoreProvider","useStore","useContext","Error","Typer","observer","refWriting","useRef","useEffect","onChange","e","current","ref","rows","className","attemptContext","AttemptProvider","count","start","increment","decrement","context","Attempts","Quotes","Global","Timer","stores","useObserver","fontList","FontPicker","map","key","style","fontFamily","onClick","Instructions","bgImage","backgroundImage","logo","WithTheme","GlobalControlls","onKeyDown","ctrlKey","altKey","App","useState","targetQuote","alt","Controls","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.181874ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { createContext } from \"react\";\r\nimport { useLocalStore } from \"mobx-react-lite\";\r\n\r\nimport quotesJson from \"./quotes.json\";\r\n/* [\r\n  {\r\n    Quote:\"Blah blahh...\", \r\n    Author: \"Mr. John\",\r\n    Tags: [tag1, tag 2, etc.],\r\n    Popularity: 0.132131, \r\n    Category: \"Life\"\r\n}, ... x 48391]*/\r\nconst adaptDataset = false;\r\nif (adaptDataset) {\r\n  let shortLength = 20, longLength = 300;\r\n\r\n  //TODO : filter uniq\r\n\r\n  let shortQuotes = quotesJson.filter(q =>\r\n    q.Quote.length <= shortLength);\r\n  let normalQuotes = quotesJson.filter(q =>\r\n    q.Quote.length > shortLength && q.Quote.length < longLength);\r\n  let longQuotes = quotesJson.filter(q =>\r\n    q.Quote.length >= longLength);\r\n\r\n  console.log(shortQuotes)\r\n  console.log(longQuotes)\r\n}\r\n\r\n\r\nfunction binarySearch(ar, el, compare_fn = (el1, el2) => (el1 - el2)) {\r\n  var m = 0;\r\n  var n = ar.length - 1;\r\n  while (m <= n) {\r\n    var k = (n + m) >> 1;\r\n    var cmp = compare_fn(el, ar[k]);\r\n    if (cmp > 0) {\r\n      m = k + 1;\r\n    } else if (cmp < 0) {\r\n      n = k - 1;\r\n    } else {\r\n      return k;\r\n    }\r\n  }\r\n  return -m - 1;\r\n}\r\n\r\nconsole.log(quotesJson.length)\r\nconsole.log(quotesJson[0])\r\n\r\n//console.log(quotesJson.map(q=>q.Popularity))\r\n\r\nlet sommePop = quotesJson.reduce((p, c) => {\r\n  c.sommePop = p + c.Popularity;\r\n  return p + c.Popularity;\r\n}, 0);\r\n\r\nfunction groupBy(arr, fnMod) {\r\n  return arr.reduce((p, c) => {\r\n    p[fnMod(c)] = p[fnMod(c)] || 0\r\n    p[fnMod(c)]++\r\n    return p;\r\n  }, {})\r\n}\r\nconsole.log(groupBy(quotesJson, q => q.Quote.length));\r\n\r\nconsole.log(\"Somme Popularity : \", sommePop)\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n  //getRandomQuote();\r\n}\r\n\r\nexport const createQuotesStore = () => ({\r\n  currentQuoteInd: 0,\r\n  getCurrentQuote: () => quotesJson[this.currentQuoteInd],\r\n  getRandomQuote: () => {\r\n    let randTarget = Math.random() * sommePop;\r\n    let indexNewQuote = Math.abs(\r\n      binarySearch(quotesJson, randTarget,\r\n        (target, quote) => target - quote.sommePop))\r\n    //console.log(\"Target pop : \" , randTarget)\r\n\r\n    console.log(indexNewQuote, \" : \", quotesJson[indexNewQuote]);\r\n\r\n    this.currentQuoteInd = indexNewQuote\r\n\r\n    return quotesJson[indexNewQuote]\r\n  }\r\n})\r\n\r\nexport const quoteContext = createContext();\r\n\r\nexport const QuoteProvider = ({ children }) => {\r\n  const store = useLocalStore(() => ({\r\n    raceStartTime: null,\r\n    raceEndTime: null,\r\n    playingState: \"home\", //countdownStart, typing, result, stats\r\n    touchesTimes: [],\r\n    finalWPM: 0,\r\n    currentText: \"\",\r\n\r\n    currentQuoteInd: 0,\r\n    getCurrentQuote: () => quotesJson[this.currentQuoteInd],\r\n    getRandomQuote: () => {\r\n      let randTarget = Math.random() * sommePop;\r\n      let indexNewQuote = Math.abs(\r\n        binarySearch(quotesJson, randTarget,\r\n          (target, quote) => target - quote.sommePop))\r\n      //console.log(\"Target pop : \" , randTarget)\r\n\r\n      console.log(indexNewQuote, \" : \", quotesJson[indexNewQuote]);\r\n\r\n      this.currentQuoteInd = indexNewQuote\r\n\r\n      return quotesJson[indexNewQuote]\r\n    },\r\n\r\n    startNew: () => {\r\n      this.finalWPM = 0\r\n      this.touchesTimes = []\r\n      this.raceStartTime = null\r\n      this.playingState = \"countdownStart\"\r\n      return this.getRandomQuote()\r\n    },\r\n\r\n    tryAgain: () => {\r\n      this.finalWPM = 0\r\n      this.touchesTimes = []\r\n      this.raceStartTime = null\r\n      this.playingState = \"countdownStart\"\r\n    },\r\n\r\n    changedTexte: (newText) => {\r\n\r\n      this.currentText = newText\r\n      if (newText === this.getCurrentQuote()) {\r\n        this.raceEndTime = Date.now()\r\n        this.playingState = \"result\"\r\n      }\r\n      else {\r\n        this.playingState = \"typing\"\r\n      }\r\n    }\r\n  }));\r\n\r\n  return (\r\n    <quoteContext.Provider value={store}>{children}</quoteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default { quoteContext, QuoteProvider };","import React from 'react'\r\nimport { useLocalStore } from 'mobx-react-lite'\r\nimport {createQuotesStore} from \"./Quotes\"\r\n// from : https://github.com/andresrestrepo/tictactoe/blob/master/src/stores/ConfigStore.js \r\n\r\nconst storeContext = React.createContext();\r\n\r\nfunction createGameStore() {\r\n\r\n    return {\r\n        font: localStorage.getItem(\"mobX-font\") || \"Special Elite\",\r\n        changeFont(newFont) {\r\n            localStorage.setItem(\"mobX-font\", newFont) \r\n            this.font = newFont\r\n        }\r\n        ,...createQuotesStore()\r\n    }\r\n}\r\n\r\nexport const StoreProvider = ({ children }) => {\r\n    const store = useLocalStore(createGameStore)\r\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>\r\n}\r\n\r\nexport const useStore = () => {\r\n    const store = React.useContext(storeContext)\r\n    if (!store) {\r\n        throw new Error('You have forgot to use StoreProvider, shame on you.')\r\n    }\r\n    return store\r\n}","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { useStore } from '../Data/ConfigStore';\r\nimport \"./Typer.css\"\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst Typer = observer(() => {\r\n  let refWriting = useRef(\"\")\r\n  const store = useStore()\r\n\r\n  useEffect(() => {\r\n\r\n\r\n  }, [store.currentQuoteInd])\r\n\r\n  return (\r\n    <textarea onChange={(e) => {\r\n      console.log(refWriting.current.value);\r\n    }}\r\n      ref={refWriting} rows={10}\r\n      className=\"writtenQuote\"></textarea>\r\n  );\r\n})\r\n\r\nexport default Typer;","import React, { createContext } from \"react\";\r\nimport { useLocalStore } from \"mobx-react-lite\";\r\n\r\nexport const attemptContext = createContext();\r\n\r\nexport const AttemptProvider = ({ children }) => {\r\n  const store = useLocalStore(() => ({\r\n    raceStartTime: null,\r\n    count: 1,\r\n    font: \"Special Elite\",\r\n    start(){\r\n      store.raceStartTime = Date.now();\r\n    },\r\n    increment() {\r\n      store.count++;\r\n    },\r\n    decrement() {\r\n      store.count--;\r\n    }\r\n  }));\r\n\r\n  return (\r\n    <attemptContext.Provider value={store}>{children}</attemptContext.Provider>\r\n  );\r\n};\r\n\r\nexport default {attemptContext, AttemptProvider};","//*\r\nimport React, { createContext } from \"react\";\r\nimport { useLocalStore } from \"mobx-react-lite\";\r\n\r\nexport const context = createContext();\r\n\r\nexport const Provider = ({ children }) => {\r\n  const store = useLocalStore(() => ({\r\n  \r\n    font: \"Special Elite\",\r\n    changeFont(newFont){\r\n      store.font = newFont\r\n    }\r\n  }));\r\n\r\n  return (\r\n    <context.Provider value={store}>{children}</context.Provider>\r\n  );\r\n};\r\n\r\nexport default {context, Provider}; \r\n/*\r\nimport { Analytics } from 'aws-amplify';\r\n\r\nimport { observable, computed, action } from \"mobx\";\r\n\r\nexport default class TodoListModel {\r\n  todos = [];\r\n\r\n  get unfinishedTodoCount() {\r\n    return this.todos.filter(todo => !todo.finished).length;\r\n  }\r\n\r\n}\r\n//*/","import Quotes from \"./Quotes\"\r\nimport Attempts from \"./Attempts\"\r\nimport Global from \"./GlobalState\"\r\n\r\nexport default {\r\n    Attempts,\r\n    Quotes,\r\n    Global\r\n}","import React, {useState, useEffect, useRef, useContext} from 'react';\r\nimport stores from \"../Data\"\r\nimport \"./Timer.css\"\r\nimport { useObserver } from 'mobx-react-lite';\r\n\r\n\r\nfunction Timer(){\r\n    let refWriting = useRef(\"\")\r\n    let t1 = stores;\r\n    const store = useContext(stores.Attempts.attemptContext)\r\n\r\n    return  useObserver(()=>(\r\n    <div className=\"countdowntimer\">x sec</div>\r\n    ));\r\n}\r\n\r\nexport default Timer;","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../Data/ConfigStore';\r\nimport \"./Timer.css\" \r\n\r\nlet fontList = [\"Odibee Sans\",\r\n    \"Raleway\",\r\n    \"Playfair Display\",\r\n    \"Simonetta\",\r\n    \"Indie Flower\",\r\n    \"Lobster\",\r\n    \"Source Code Pro\",\r\n    \"Dancing Script\",\r\n    \"Amatic SC\",\r\n    \"Cinzel\",\r\n    \"Permanent Marker\",\r\n    \"Satisfy\",\r\n    \"Advent Pro\",\r\n    \"Poiret One\",\r\n    \"Special Elite\",\r\n    \"Monoton\",\r\n    \"Press Start 2P\"]\r\n\r\nconst FontPicker = observer(() => { \r\n        const store = useStore();//useContext(stores.Attempts.attemptContext)\r\n\r\n        return  (\r\n            <select className=\"fontPicker\" onChange={e => {\r\n                console.log(e.target.value)\r\n                let t1 = store;\r\n                store.changeFont(e.target.value);\r\n            }}\r\n            value={store.font}>\r\n                {fontList.map((font) =>\r\n                    <option key={font}\r\n                     style={{fontFamily:font}} value={font} >{font}</option>)}\r\n            </select>\r\n        );\r\n    })\r\n\r\nexport default FontPicker;","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../Data/ConfigStore';\r\nimport \"./Timer.css\"\r\n\r\nconst FontPicker = observer(() => {\r\n    const store = useStore();//useContext(stores.Attempts.attemptContext)\r\n\r\n    return (\r\n        <div className=\"controls\">\r\n            <button onClick={e => {\r\n                store.startNew()\r\n            }}>\r\n                new quote</button>\r\n\r\n            <button onClick={e => {\r\n                store.tryAgain()\r\n            }}>\r\n                retry quote</button>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default FontPicker;","import React from 'react';\r\nimport \"./Instructions.css\"\r\n\r\n\r\nconst Instructions = () => (\r\n    <div className=\"instructions\">\r\n        <p>ctrl-alt-k pour nouveau test</p>\r\n        <p>ctrl-alt-m pour nouveau reprendre le test</p>\r\n        <p>ctrl-alt-p pour voir vos profile</p>\r\n    </div>\r\n);\r\n\r\n\r\nexport default Instructions;","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport Typer from \"../Components/Typer\"\nimport Timer from \"../Components/Timer\"\nimport FontPicker from \"../Components/FontPicker\"\nimport Controls from \"../Components/Controls\"\nimport Instructions from \"../Components/Instructions\"\nimport logo from '../assets/logo.svg';\nimport './App.css';\nimport { StoreProvider } from '../Data/ConfigStore'\nimport { observer, useObserver } from 'mobx-react-lite';\nimport { useStore } from '../Data/ConfigStore';\n\nconst style = {\n  bgImage: {\n    backgroundImage: `url(${logo})`\n  }\n};\n\n\nconst WithTheme = observer(({ children }) => {\n  const store = useStore();\n  console.log(\"debug Me!\")\n  return (\n    <div style={{ fontFamily: store.font }} className=\"App\">\n      {children}\n    </div>\n  )\n})\n\nconst GlobalControlls = observer(({ children }) => {\n  const store = useStore();\n  console.log(\"debug Me!\")\n  return (\n    <div onKeyDown={e => {\n      console.log(e);\n      if (e.ctrlKey && e.altKey) {\n        if (e.key == \"p\") {\n          console.log(\"TODO : Profile page\");\n        }\n        if (e.key == \"k\") {\n          console.log(\"Get new quote\")\n        }\n        if (e.key == \"m\") {\n          console.log(\"Retry quote\")\n        }\n      }\n    }}>\n      {children}\n    </div>\n  )\n})\n\nconst App = () => {\n  let [targetQuote, setQuote] = useState(\"[Picking a quote...]\")\n  let [writtenQuote, setWritten] = useState(\"\")\n  // console.log(stores)\n  //const globalState = useContext(stores.Global.context)\n  //console.log(globalState)\n\n  //let currentAttempt = useObservable(stores.Attempts.AttemptProvider)\n  /*\n  const login = () => store.setUser(new User(\"hiiii\"));\n  const logout = () => store.setUser(new User(\"byyee\"));\n  const changeName = () => store.user.setName(\"newname\");\n  const addNode = () => store.user.addNode(\"hullo dear\");\n  const clearNodes = () => store.user.clearNodes();*/\n\n  //useFont \"Special Elite\"\n  return (\n    <StoreProvider>\n      <WithTheme>\n        <GlobalControlls>\n\n          <div className=\"App-header\">\n\n            <FontPicker />\n\n            <div style={style.bgImage} className=\"App-logo\" alt=\"logo\" />\n            <div className=\"typerHeader\">\n              Speed Typer\n        <br />(create-react-app / mobx-react-lite)\n        </div>\n\n            <Instructions />\n\n            <Timer />\n\n            <div className=\"targetQuote\">{targetQuote}</div>\n\n            <Typer />\n\n            <Controls />\n          </div>\n        </GlobalControlls>\n      </WithTheme>\n    </StoreProvider >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}